// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: playground-oam/entities.proto

package grpc_playground_oam_go

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _entities_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on DefinitionRef with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DefinitionRef) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Version

	return nil
}

// DefinitionRefValidationError is the validation error returned by
// DefinitionRef.Validate if the designated constraints aren't met.
type DefinitionRefValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DefinitionRefValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DefinitionRefValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DefinitionRefValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DefinitionRefValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DefinitionRefValidationError) ErrorName() string { return "DefinitionRefValidationError" }

// Error satisfies the builtin error interface
func (e DefinitionRefValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDefinitionRef.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DefinitionRefValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DefinitionRefValidationError{}

// Validate checks the field values on Metadata with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Metadata) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Annotations

	// no validation rules for Labels

	// no validation rules for Uid

	// no validation rules for CreationTimestamp

	return nil
}

// MetadataValidationError is the validation error returned by
// Metadata.Validate if the designated constraints aren't met.
type MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetadataValidationError) ErrorName() string { return "MetadataValidationError" }

// Error satisfies the builtin error interface
func (e MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetadataValidationError{}

// Validate checks the field values on ComponentParameterValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ComponentParameterValue) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Value

	return nil
}

// ComponentParameterValueValidationError is the validation error returned by
// ComponentParameterValue.Validate if the designated constraints aren't met.
type ComponentParameterValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComponentParameterValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComponentParameterValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComponentParameterValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComponentParameterValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComponentParameterValueValidationError) ErrorName() string {
	return "ComponentParameterValueValidationError"
}

// Error satisfies the builtin error interface
func (e ComponentParameterValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComponentParameterValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComponentParameterValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComponentParameterValueValidationError{}

// Validate checks the field values on ApplicationScopeReference with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplicationScopeReference) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApiVersion

	// no validation rules for Kind

	// no validation rules for Name

	// no validation rules for Uid

	return nil
}

// ApplicationScopeReferenceValidationError is the validation error returned by
// ApplicationScopeReference.Validate if the designated constraints aren't met.
type ApplicationScopeReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationScopeReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationScopeReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationScopeReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationScopeReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationScopeReferenceValidationError) ErrorName() string {
	return "ApplicationScopeReferenceValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationScopeReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationScopeReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationScopeReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationScopeReferenceValidationError{}

// Validate checks the field values on ApplicationScope with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ApplicationScope) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetScopeRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationScopeValidationError{
				field:  "ScopeRef",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ApplicationScopeValidationError is the validation error returned by
// ApplicationScope.Validate if the designated constraints aren't met.
type ApplicationScopeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationScopeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationScopeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationScopeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationScopeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationScopeValidationError) ErrorName() string { return "ApplicationScopeValidationError" }

// Error satisfies the builtin error interface
func (e ApplicationScopeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationScope.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationScopeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationScopeValidationError{}

// Validate checks the field values on ApplicationTrait with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ApplicationTrait) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if v, ok := interface{}(m.GetProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationTraitValidationError{
				field:  "Properties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTrait()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationTraitValidationError{
				field:  "Trait",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ApplicationTraitValidationError is the validation error returned by
// ApplicationTrait.Validate if the designated constraints aren't met.
type ApplicationTraitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationTraitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationTraitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationTraitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationTraitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationTraitValidationError) ErrorName() string { return "ApplicationTraitValidationError" }

// Error satisfies the builtin error interface
func (e ApplicationTraitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationTrait.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationTraitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationTraitValidationError{}

// Validate checks the field values on ComponentSummary with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ComponentSummary) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ComponentSummaryValidationError is the validation error returned by
// ComponentSummary.Validate if the designated constraints aren't met.
type ComponentSummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComponentSummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComponentSummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComponentSummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComponentSummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComponentSummaryValidationError) ErrorName() string { return "ComponentSummaryValidationError" }

// Error satisfies the builtin error interface
func (e ComponentSummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComponentSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComponentSummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComponentSummaryValidationError{}

// Validate checks the field values on ApplicationComponent with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplicationComponent) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ComponentName

	for idx, item := range m.GetParameterValues() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationComponentValidationError{
					field:  fmt.Sprintf("ParameterValues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetComponentSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationComponentValidationError{
				field:  "ComponentSummary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationComponentValidationError{
					field:  fmt.Sprintf("Scopes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTraits() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationComponentValidationError{
					field:  fmt.Sprintf("Traits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ApplicationComponentValidationError is the validation error returned by
// ApplicationComponent.Validate if the designated constraints aren't met.
type ApplicationComponentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationComponentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationComponentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationComponentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationComponentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationComponentValidationError) ErrorName() string {
	return "ApplicationComponentValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationComponentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationComponent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationComponentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationComponentValidationError{}

// Validate checks the field values on ApplicationConfigurationSpec with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplicationConfigurationSpec) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetComponents() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationConfigurationSpecValidationError{
					field:  fmt.Sprintf("Components[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ApplicationConfigurationSpecValidationError is the validation error returned
// by ApplicationConfigurationSpec.Validate if the designated constraints
// aren't met.
type ApplicationConfigurationSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationConfigurationSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationConfigurationSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationConfigurationSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationConfigurationSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationConfigurationSpecValidationError) ErrorName() string {
	return "ApplicationConfigurationSpecValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationConfigurationSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationConfigurationSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationConfigurationSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationConfigurationSpecValidationError{}

// Validate checks the field values on ApplicationConfiguration with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplicationConfiguration) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApiVersion

	// no validation rules for Kind

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationConfigurationValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationConfigurationValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ApplicationConfigurationValidationError is the validation error returned by
// ApplicationConfiguration.Validate if the designated constraints aren't met.
type ApplicationConfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationConfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationConfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationConfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationConfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationConfigurationValidationError) ErrorName() string {
	return "ApplicationConfigurationValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationConfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationConfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationConfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationConfigurationValidationError{}

// Validate checks the field values on Component with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Component) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApiVersion

	// no validation rules for Kind

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ComponentValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ComponentValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ComponentValidationError is the validation error returned by
// Component.Validate if the designated constraints aren't met.
type ComponentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComponentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComponentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComponentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComponentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComponentValidationError) ErrorName() string { return "ComponentValidationError" }

// Error satisfies the builtin error interface
func (e ComponentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComponent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComponentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComponentValidationError{}

// Validate checks the field values on ComponentSpec with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ComponentSpec) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	if v, ok := interface{}(m.GetWorkload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ComponentSpecValidationError{
				field:  "Workload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ComponentSpecValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetParameters() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ComponentSpecValidationError{
					field:  fmt.Sprintf("Parameters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ComponentSpecValidationError is the validation error returned by
// ComponentSpec.Validate if the designated constraints aren't met.
type ComponentSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComponentSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComponentSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComponentSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComponentSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComponentSpecValidationError) ErrorName() string { return "ComponentSpecValidationError" }

// Error satisfies the builtin error interface
func (e ComponentSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComponentSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComponentSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComponentSpecValidationError{}

// Validate checks the field values on WorkloadSpec with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *WorkloadSpec) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for OsType

	for idx, item := range m.GetContainers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorkloadSpecValidationError{
					field:  fmt.Sprintf("Containers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// WorkloadSpecValidationError is the validation error returned by
// WorkloadSpec.Validate if the designated constraints aren't met.
type WorkloadSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkloadSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkloadSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkloadSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkloadSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkloadSpecValidationError) ErrorName() string { return "WorkloadSpecValidationError" }

// Error satisfies the builtin error interface
func (e WorkloadSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkloadSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkloadSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkloadSpecValidationError{}

// Validate checks the field values on Port with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Port) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Value

	// no validation rules for ContainerPort

	// no validation rules for Type

	return nil
}

// PortValidationError is the validation error returned by Port.Validate if the
// designated constraints aren't met.
type PortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortValidationError) ErrorName() string { return "PortValidationError" }

// Error satisfies the builtin error interface
func (e PortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPort.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortValidationError{}

// Validate checks the field values on FromValueEnv with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *FromValueEnv) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Key

	return nil
}

// FromValueEnvValidationError is the validation error returned by
// FromValueEnv.Validate if the designated constraints aren't met.
type FromValueEnvValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FromValueEnvValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FromValueEnvValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FromValueEnvValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FromValueEnvValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FromValueEnvValidationError) ErrorName() string { return "FromValueEnvValidationError" }

// Error satisfies the builtin error interface
func (e FromValueEnvValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFromValueEnv.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FromValueEnvValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FromValueEnvValidationError{}

// Validate checks the field values on FromConfigEnv with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *FromConfigEnv) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetConfigMapKeyRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FromConfigEnvValidationError{
				field:  "ConfigMapKeyRef",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// FromConfigEnvValidationError is the validation error returned by
// FromConfigEnv.Validate if the designated constraints aren't met.
type FromConfigEnvValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FromConfigEnvValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FromConfigEnvValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FromConfigEnvValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FromConfigEnvValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FromConfigEnvValidationError) ErrorName() string { return "FromConfigEnvValidationError" }

// Error satisfies the builtin error interface
func (e FromConfigEnvValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFromConfigEnv.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FromConfigEnvValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FromConfigEnvValidationError{}

// Validate checks the field values on EnvironmentVariable with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EnvironmentVariable) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Required

	// no validation rules for Value

	if v, ok := interface{}(m.GetFromSecret()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EnvironmentVariableValidationError{
				field:  "FromSecret",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetValueFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EnvironmentVariableValidationError{
				field:  "ValueFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EnvironmentVariableValidationError is the validation error returned by
// EnvironmentVariable.Validate if the designated constraints aren't met.
type EnvironmentVariableValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnvironmentVariableValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnvironmentVariableValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnvironmentVariableValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnvironmentVariableValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnvironmentVariableValidationError) ErrorName() string {
	return "EnvironmentVariableValidationError"
}

// Error satisfies the builtin error interface
func (e EnvironmentVariableValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnvironmentVariable.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnvironmentVariableValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnvironmentVariableValidationError{}

// Validate checks the field values on Container with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Container) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Image

	// no validation rules for ImagePullPolicy

	for idx, item := range m.GetPorts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContainerValidationError{
					field:  fmt.Sprintf("Ports[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetEnv() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContainerValidationError{
					field:  fmt.Sprintf("Env[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ContainerValidationError is the validation error returned by
// Container.Validate if the designated constraints aren't met.
type ContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerValidationError) ErrorName() string { return "ContainerValidationError" }

// Error satisfies the builtin error interface
func (e ContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerValidationError{}

// Validate checks the field values on Parameter with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Parameter) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Required

	return nil
}

// ParameterValidationError is the validation error returned by
// Parameter.Validate if the designated constraints aren't met.
type ParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParameterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParameterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParameterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParameterValidationError) ErrorName() string { return "ParameterValidationError" }

// Error satisfies the builtin error interface
func (e ParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParameterValidationError{}

// Validate checks the field values on Workload with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Workload) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApiVersion

	// no validation rules for Kind

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkloadValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkloadValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// WorkloadValidationError is the validation error returned by
// Workload.Validate if the designated constraints aren't met.
type WorkloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkloadValidationError) ErrorName() string { return "WorkloadValidationError" }

// Error satisfies the builtin error interface
func (e WorkloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkloadValidationError{}

// Validate checks the field values on TraitSpec with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TraitSpec) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDefinitionRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TraitSpecValidationError{
				field:  "DefinitionRef",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for WorkloadRefPath

	return nil
}

// TraitSpecValidationError is the validation error returned by
// TraitSpec.Validate if the designated constraints aren't met.
type TraitSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TraitSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TraitSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TraitSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TraitSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TraitSpecValidationError) ErrorName() string { return "TraitSpecValidationError" }

// Error satisfies the builtin error interface
func (e TraitSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTraitSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TraitSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TraitSpecValidationError{}

// Validate checks the field values on Trait with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Trait) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApiVersion

	// no validation rules for Kind

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TraitValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TraitValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TraitValidationError is the validation error returned by Trait.Validate if
// the designated constraints aren't met.
type TraitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TraitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TraitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TraitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TraitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TraitValidationError) ErrorName() string { return "TraitValidationError" }

// Error satisfies the builtin error interface
func (e TraitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrait.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TraitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TraitValidationError{}

// Validate checks the field values on ScopeSpec with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ScopeSpec) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AllowComponentOverlap

	if v, ok := interface{}(m.GetDefinitionRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScopeSpecValidationError{
				field:  "DefinitionRef",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for WorkloadRefPath

	return nil
}

// ScopeSpecValidationError is the validation error returned by
// ScopeSpec.Validate if the designated constraints aren't met.
type ScopeSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScopeSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScopeSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScopeSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScopeSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScopeSpecValidationError) ErrorName() string { return "ScopeSpecValidationError" }

// Error satisfies the builtin error interface
func (e ScopeSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScopeSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScopeSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScopeSpecValidationError{}

// Validate checks the field values on Scope with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Scope) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApiVersion

	// no validation rules for Kind

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScopeValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScopeValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ScopeValidationError is the validation error returned by Scope.Validate if
// the designated constraints aren't met.
type ScopeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScopeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScopeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScopeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScopeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScopeValidationError) ErrorName() string { return "ScopeValidationError" }

// Error satisfies the builtin error interface
func (e ScopeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScope.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScopeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScopeValidationError{}

// Validate checks the field values on ChildResourceKind with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ChildResourceKind) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApiVersion

	// no validation rules for Kind

	return nil
}

// ChildResourceKindValidationError is the validation error returned by
// ChildResourceKind.Validate if the designated constraints aren't met.
type ChildResourceKindValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChildResourceKindValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChildResourceKindValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChildResourceKindValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChildResourceKindValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChildResourceKindValidationError) ErrorName() string {
	return "ChildResourceKindValidationError"
}

// Error satisfies the builtin error interface
func (e ChildResourceKindValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChildResourceKind.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChildResourceKindValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChildResourceKindValidationError{}

// Validate checks the field values on WorkloadDefinitionSpec with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WorkloadDefinitionSpec) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetChildResourceKinds() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorkloadDefinitionSpecValidationError{
					field:  fmt.Sprintf("ChildResourceKinds[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetDefinitionRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkloadDefinitionSpecValidationError{
				field:  "DefinitionRef",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PodSpecPath

	// no validation rules for RevisionLabel

	return nil
}

// WorkloadDefinitionSpecValidationError is the validation error returned by
// WorkloadDefinitionSpec.Validate if the designated constraints aren't met.
type WorkloadDefinitionSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkloadDefinitionSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkloadDefinitionSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkloadDefinitionSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkloadDefinitionSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkloadDefinitionSpecValidationError) ErrorName() string {
	return "WorkloadDefinitionSpecValidationError"
}

// Error satisfies the builtin error interface
func (e WorkloadDefinitionSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkloadDefinitionSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkloadDefinitionSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkloadDefinitionSpecValidationError{}

// Validate checks the field values on WorkloadDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WorkloadDefinition) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApiVersion

	// no validation rules for Kind

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkloadDefinitionValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkloadDefinitionValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// WorkloadDefinitionValidationError is the validation error returned by
// WorkloadDefinition.Validate if the designated constraints aren't met.
type WorkloadDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkloadDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkloadDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkloadDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkloadDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkloadDefinitionValidationError) ErrorName() string {
	return "WorkloadDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e WorkloadDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkloadDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkloadDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkloadDefinitionValidationError{}
