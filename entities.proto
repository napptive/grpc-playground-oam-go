syntax = "proto3";

package playground_oam;
option go_package = "github.com/napptive/grpc-playground-oam-go;grpc_playground_oam_go";

import "google/protobuf/struct.proto";

// Use this file to define entities that appear on the OAM specification.
// This file has been generated by analyzing the description of the different oam entities as deployed in Kubernetes.
// Some descriptions have been copied from those entities. To describe an entity use:
// $ kubectl describe crd traitdefinitions.core.oam.dev

//
// Schematics related
//

// DefinitionRef with the reference to the CustomResourceDefinition that defines this trait kind.
message DefinitionRef {
    // Name of the referenced CustomResourceDefinition.
    string name = 1;
    // Version indicate which version should be used if CRD has multiple versions by default it will use the first one if not specified
    string version = 2;
}

// Metadata associated with a kubernetes entity.
message Metadata{
    // Name of the resource
    string name = 1;
    // Annotations of the resource.
    map<string, string> annotations = 2;
    // Labels related to the resource.
    map<string, string> labels = 3;
    // UID is the unique in time and space value for this object. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    string uid = 4;
}

//
// Applications
//

// ComponentParameterValue specifies a value for a named parameter. The associated component must publish a parameter with this name.
message ComponentParameterValue{
    // Name of parameter to be set. This field is mandatory.
    string name = 1;
    // Value to be applied. This field is mandatory.
    string value = 2;
}

// ApplicationScopeReference to reference a given scope.
message ApplicationScopeReference{
    // ApiVersion of the given scope. This field is mandatory.
    string api_version = 1;
    // Kind of the scope. This field is mandatory.
    string kind = 2;
    // Name of the scope. This field is mandatory.
    string name = 3;
    // Uid of the scope. This field is optional.
    string uid = 4;
}

// ApplicationScope specifies a scope in which a component should exist.
message ApplicationScope{
    // ScopeRef must refer to an OAM scope resource.
    ApplicationScopeReference scope_ref = 1;
}

// ApplicationTrait specifies a trait that should be applied to a component.
message ApplicationTrait{
    // The name of trait definition. This is used to reference to the definition/schema of the Trait. For one type of trait, there could be only one config/deploy in one component.
    string name = 1;
    // Properties that can be configured and are exposed by this trait.
    google.protobuf.Struct properties = 2;
    // Trait with the full specification of trait that should be passed to the runtime. This field is mutually exclusive with name and properties. [Legacy].
    google.protobuf.Struct trait = 3;
}

// ApplicationComponent defines a component associated with an application configuration.
message ApplicationComponent{
    // ComponentName specifies a component whose latest revision will be bind with ApplicationConfiguration. When the spec of the referenced component changes, ApplicationConfiguration will automatically migrate all trait affect from the prior revision to the new one. This is mutually exclusive with RevisionName.
    string component_name = 1;
    //ParameterValues specify values for the the specified component's parameters. Any parameter required by the component must be specified.
    repeated ComponentParameterValue parameter_values = 2;
    // Instance of the linked component
    Component instance  = 3;
    // Scopes in which the specified component should exist.
    repeated ApplicationScope scopes = 4;
    // Traits of the specified component.
    repeated ApplicationTrait traits = 5;
}

// ApplicationConfigurationSpec with the specification of the application configuration.
message ApplicationConfigurationSpec{
    // Components associated with the application.
    repeated ApplicationComponent components = 1;
}

// ApplicationConfiguration entity describing the components that form an application.
message ApplicationConfiguration{
    // ApiVersion of the given application configuration.
    string api_version = 1;
    // Kind of the application configuration.
    string kind = 2;
    // Metadata associated with the application configuration.
    Metadata metadata = 3;
    // Spec of the application configuration.
    ApplicationConfigurationSpec spec = 4;
}


//
// Components
//

// Component with the information of a component in the OAM spec.
message Component{
    // ApiVersion of the component.
    string api_version = 1;
    // Kind of component.
    string kind = 2;
    // Metadata associated with the component.
    Metadata metadata = 3;
    // Spec associated with the component.
    ComponentSpec spec = 4;
}

// ComponentSpec with the spec of an OAM component.
message ComponentSpec{
    // Type of component
    string type = 1;
    // Workload of the component. This field is mutually exclusive with type and settings.
    Workload workload = 2;
    // Settings of the workload
    WorkloadSpec settings = 3;
    // Parameters with the component parameters
    repeated Parameter parameters = 4;
}

// WorkloadSpec with the workloadSpec
message WorkloadSpec {
    string os_type = 1;
    repeated Container containers = 2;
}

// Port message with the port specification
message Port {
    // Name of the port
    string name = 1;
    // Value with the port number
    int32 value = 2;
    // ContainerPort with the port in the container
    int32 container_port = 3;
    // Type port
    string type = 4;
}

// FromValueEnv message to select a Secret or a configmap to populate the environment variables with.
message FromValueEnv {
    // name with the secret name
    string name = 1;
    // key with the key in the secret
    string key = 2;
}

// FromSecretEnv message to select a ConfigMap to populate the environment variables with.
message FromConfigEnv {
    // ConfigMapKeyRef indicates the configmap used to get the env variable
    FromValueEnv config_map_key_ref = 1;
}

// EnvironmentVariable message with the environment variable information
// There are different ways to define environment variable.
// Value, secret or configmap
message EnvironmentVariable {
    // Name with the name of the variable
    string name = 1;
    // Required indicates if the variable must to be filled
    bool required = 2;
    // Value of the variable
    string value = 3;
    // FromSecret indicates the env takes from a secret
    FromValueEnv from_secret = 4;
    // valueFrom indicates where is the env information
    FromConfigEnv value_from = 5;
}

// Container with the container information
message Container {
    // name of the container
    string name = 1;
    // Image of the container
    string image = 2;
    // ImagePullPolicy
    string image_pull_policy = 3;
    // ports with the ports
    repeated Port ports = 4;
    // cmd with the command to execute the container
    repeated string cmd = 5;
    // env with a list of environment variables
    repeated EnvironmentVariable env = 6;
    // resources
}

// Parameter message with the parameter definition
message Parameter {
    // Name of the parameter
    string name = 1;
    // Required with a flag to indicate if the parameter is required or not
    bool required = 2;
    // FieldPaths with the paths where the parameter is applied
    repeated string field_paths = 3;
}

// Workload with the information of a workload.
message Workload {
    // ApiVersion of the Workload.
    string api_version = 1;
    // Kind of component.
    string kind = 2;
    // Metadata associated with the workload.
    Metadata metadata = 3;
    // Spec with the workload specification
    WorkloadSpec spec = 4;
}

//
// Traits
//

// TraitSpec with the Spec section of a trait.
message TraitSpec {
    // AppliesToWorkloads specifies the list of workload kinds this trait applies to. Workload kinds are specified in kind.group/version format, e.g. server.core.oam.dev/v1alpha2. Traits that omit this field apply to all workload kinds.
    repeated string applies_to_workloads = 2;
    // DefinitionRef with the reference to the CustomResourceDefinition that defines this trait kind
    DefinitionRef definition_ref = 3;
    // WorkloadRefPath indicates where/if a trait accepts a workloadRef object.
    string workload_ref_path = 4;
}

// Trait as defined in the OAM schematics.
message Trait {
    // ApiVersion of the given trait.
    string api_version = 1;
    // Kind of the trait.
    string kind = 2;
    // Metadata associated with the trait.
    Metadata metadata = 3;
    // Spec of the trait.
    TraitSpec spec = 4;
}

//
// Scopes
//

// ScopeSpec with the specification of a scope.
message ScopeSpec{
    // AllowComponentOverlap specifies whether an OAM component may exist in multiple instances of this kind of scope.
    bool allow_component_overlap = 1;
    // DefinitionRef with the reference to the CustomResourceDefinition that defines this scope kind
    DefinitionRef definition_ref = 2;
    // WorkloadRefPath indicates where/if a trait accepts a workloadRef object.
    string workload_ref_path = 3;
}

// Scope as defined in the OAM schematics.
message Scope {
    // ApiVersion of the given scope.
    string api_version = 1;
    // Kind of the scope.
    string kind = 2;
    // Metadata associated with the scope.
    Metadata metadata = 3;
    // Spec of the scope.
    ScopeSpec spec = 4;
}

//
// Workload Definitions. Notice: There seems to be a naming collision on the spec with the Component Workload.
//

// ChildResourceKind defines a reference for a child resource.
// TODO Add selector property when we find a usage example.
message ChildResourceKind {
    // ApiVersion of the given child resource. This field is mandatory.
    string api_version = 1;
    // Kind of the child resource. This field is mandatory.
    string kind = 2;
}

// WorkloadDefinitionSpec defines the desired state of a WorkloadDefinition.
message WorkloadDefinitionSpec {
    // ChildResourceKinds are the list of GVK of the child resources this workload generates. This field is optional.
    repeated ChildResourceKind child_resource_kinds = 1;
    // DefinitionRef with the reference to the CustomResourceDefinition that defines this scope kind. This field is mandatory.
    DefinitionRef definition_ref = 2;
    // PodSpecPath indicates where/if this workload has K8s podSpec field if one workload has podSpec, trait can do lot's of assumption such as port, env, volume fields. This field is optional.
    string pod_spec_path = 3;
    // RevisionLabel indicates which label for underlying resources(e.g. pods) of this workload can be used by trait to create resource selectors(e.g. label selector for pods). This field is optional.
    string revision_label = 4;
}

// WorkloadDefinition as defined in the OAM schematics.
message WorkloadDefinition {
    // ApiVersion of the given workload.
    string api_version = 1;
    // Kind of the workload.
    string kind = 2;
    // Metadata associated with the workload.
    Metadata metadata = 3;
    // Spec of the workload.
    WorkloadDefinitionSpec spec = 4;
}
