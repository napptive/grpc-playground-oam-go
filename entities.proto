syntax = "proto3";

package playground_oam;
option go_package = "github.com/napptive/grpc-playground-oam-go;grpc_playground_oam_go";

// Use this file to define entities that appear on the OAM specification.
// This file has been generated by analyzing the description of the different oam entities as deployed in Kubernetes.
// Some descriptions have been copied from those entities. To describe an entity use:
// $ kubectl describe crd traitdefinitions.core.oam.dev

//
// Schematics related
//

// DefinitionRef with the reference to the CustomResourceDefinition that defines this trait kind.
message DefinitionRef {
    // Name of the referenced CustomResourceDefinition.
    string name = 1;
    // Version indicate which version should be used if CRD has multiple versions by default it will use the first one if not specified
    string version = 2;
}

// Metadata associated with a kubernetes entity.
message Metadata{
    // Name of the resource
    string name = 1;
    // Annotations of the resource.
    map<string, string> annotations = 2;
    // Labels related to the resource.
    map<string, string> labels = 3;
}

//
// Components
//

// Component as defined in the OAM schematics.
message Component {
    // ApiVersion of the component.
    string api_version = 1;
    // Kind of component.
    string kind = 2;
    // Name of the component.
    string name = 3;
}

//
// Traits
//

// TraitSpec with the Spec section of a trait.
message TraitSpec {
    // AppliesToWorkloads specifies the list of workload kinds this trait applies to. Workload kinds are specified in kind.group/version format, e.g. server.core.oam.dev/v1alpha2. Traits that omit this field apply to all workload kinds.
    repeated string applies_to_workloads = 2;
    // DefinitionRef with the reference to the CustomResourceDefinition that defines this trait kind
    DefinitionRef definition_ref = 3;
    // WorkloadRefPath indicates where/if a trait accepts a workloadRef object.
    string workload_ref_path = 4;
}

// Trait as defined in the OAM schematics.
message Trait {
    // ApiVersion of the given trait.
    string api_version = 1;
    // Kind of the trait.
    string kind = 2;
    // Metadata associated with the trait.
    Metadata metadata = 3;
    // Spec of the trait.
    TraitSpec spec = 4;
}

//
// Scopes
//

// ScopeSpec with the specification of a scope.
message ScopeSpec{
    // AllowComponentOverlap specifies whether an OAM component may exist in multiple instances of this kind of scope.
    bool allow_component_overlap = 1;
    // DefinitionRef with the reference to the CustomResourceDefinition that defines this scope kind
    DefinitionRef definition_ref = 2;
    // WorkloadRefPath indicates where/if a trait accepts a workloadRef object.
    string workload_ref_path = 3;
}

// Scope as defined in the OAM schematics.
message Scope {
    // ApiVersion of the given scope.
    string api_version = 1;
    // Kind of the scope.
    string kind = 2;
    // Metadata associated with the scope.
    Metadata metadata = 3;
    // Spec of the scope.
    ScopeSpec spec = 4;
}

//
// Workload Definitions. Notice: There seems to be a naming collision on the spec with the Component Workload.
//

// ChildResourceKind defines a reference for a child resource.
// TODO Add selector property when we find a usage example.
message ChildResourceKind {
    // ApiVersion of the given child resource. This field is mandatory.
    string api_version = 1;
    // Kind of the child resource. This field is mandatory.
    string kind = 2;
}

// WorkloadDefinitionSpec defines the desired state of a WorkloadDefinition.
message WorkloadDefinitionSpec {
    // ChildResourceKinds are the list of GVK of the child resources this workload generates. This field is optional.
    repeated ChildResourceKind child_resource_kinds = 1;
    // DefinitionRef with the reference to the CustomResourceDefinition that defines this scope kind. This field is mandatory.
    DefinitionRef definition_ref = 2;
    // PodSpecPath indicates where/if this workload has K8s podSpec field if one workload has podSpec, trait can do lot's of assumption such as port, env, volume fields. This field is optional.
    string pod_spec_path = 3;
    // RevisionLabel indicates which label for underlying resources(e.g. pods) of this workload can be used by trait to create resource selectors(e.g. label selector for pods). This field is optional.
    string revision_label = 4;
}

// WorkloadDefinition as defined in the OAM schematics.
message WorkloadDefinition {
    // ApiVersion of the given workload.
    string api_version = 1;
    // Kind of the workload.
    string kind = 2;
    // Metadata associated with the workload.
    Metadata metadata = 3;
    // Spec of the workload.
    WorkloadDefinitionSpec spec = 4;
}
